A point-light (marker) biological motion display. Or a mask based on scrambled marker positions replicated out to any number of dots. Each element is based on marker motion data in BML mm or md format:


MM ("MOTION MODEL") DATA
An efficient Fourier encoding for periodic motion (e.g. walking). Repeats until a cue you set in property .end occurs. Data are a 2D matrix of size [3*numMarker+1 1+numHarmonics*2]:

rows: [
    x coords for marker 1
    x coords for marker 2
    x coords for marker 3
    ...
    y coords for marker 1
    ...
    z coords for marker 1
    ....
    info row
    ]

cols: mean marker positions, harmonic 1 cos, sin, harmonic 2 cos, sin, ...

info row: period (frames), size factor, translation speed (data distance units/frame)

For details see Troje, N.F. (2008): "Retrieving information from human movement patterns". In Shipley, T.F. and Zacks, J.M. (eds.): "Understanding Events: How Humans See, Represent, and Act on Events", 308-334. Oxford University Press. Available at https://www.biomotionlab.ca/Text/trojeChapter07b.pdf.


MD ("MOTION DATA") DATA
A marker Cartesian coordinate time series for any motion. Limited duration but by default plays indefinitely by repeating until a cue you set in property .end occurs (see .repeat below).
Data are a 3D matrix of size [numFrames numMarkers 3].


In both data formats standard coding for an upright person is facing in +x and upright in +z. These axes in motion data space map to facing out of the screen and upright (+z, -y) in screen space.


LICENSE
----------
This element class code and its documentation (the "Software") is copyright 2019 Nikolaus Troje and Giles Holland.

Permission is hereby granted, free of charge, to any person obtaining a copy of the Software to use, copy, modify, merge, publish, and/or distribute the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The Software may not be used for commercial purposes.

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

The software is provided "as is", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.
----------





INPUT PROPERTIES
You can set input properties to specify how an object will show or run.
To leave any property at default, omit it (or leave = []).
==========



----------
Adjustable input properties

You can allow the subject to adjust the following input properties of an object of this class during the experiment using an adjuster element. If you need to make other properties adjustable, you can edit the element class.

(None)



----------
dataExpr    NO DEFAULT.

The marker motion data must be present in the base MATLAB workspace in a variable separate from the bmlWalker object. Data must be a matrix in BML mm or md format (see above). .dataExpr is a string that is the expression pointing to the data. This can be just a variable name, or it can include indexes, field names, etc.
    e.g.

"walkerData"
"walkers{5}"
"ss2.move{2}.mdData" 



----------
fps    DEFAULT: 120 frames/sec.

Frame rate motion data was recorded at (frames/sec).



----------
height      DEFAULT: 8 deg.
sizeMult    

Set one of .height (absolute size) or .sizeMult (relative size):

.height sets height directly (deg). Here height is the greatest vertical distance (z axis in the motion data) spanned by dots across time.

OR

.sizeMult is a conversion factor from whatever distance units the motion data is in (e.g. mm) to percent screen height. i.e. the conversion factor has units deg visual angle / data distance units, and just multiplies the motion data. Note for mm data this disregards any size factor in data(end,2). .sizeMult is useful when you want to preserve relative sizes between different walker data by setting it equal across different walker elements.



----------
azimuth
elevation    DEFAULTS: facing out of screen (for standard data).

.azimuth is horizontal angle from +x to +y axis in the motion data (deg). For standard data coding of an upright person (see at top) 0 = facing out of the screen, +90 = facing right on screen, -90 = facing left on screen, etc.

.elevation is vertical angle (deg).

Order rotations applied: azimuth, elevation.



----------
azimuthVel    DEFAULT: no rotational velocity.

Horizontal angle velocity (deg/sec).



----------
speed    DEFAULT: normal speed.

Motion speed, including reverse motion. 1 = normal, 0.5 = half speed, 2 = double speed, -1 = reverse normal, etc.



----------
transVelMult
transVelOffset    DEFAULTS: no translation.

.transVelMult: Only for mm data. A number scaling the translation velocity recorded in data(end,3). 0 = no translation, 1 = normal speed, 2 = double speed, -1 = normal speed in reverse direction etc. NOTE: PsychBench also automatically scales translation velocity by .speed above.

.transVelOffset is added to translation velocity after scaling by .speed and .transVelMult. In whatever units the velocity in the motion data is in. + = forward, - = reverse. Note this disregards any size factor in data(end,2).



----------
dotSize           DEFAULT: 0.19 deg.
nn_showMarkers    DEFAULT: show all markers.

.dotSize is dot diameter (deg). 0 = don't show dots.

If .dotSize > 0, .nn_showMarkers is a vector of marker numbers in the motion data to show. [] = all.

Note: Regardless of .dotSize and .nn_showMarkers, all markers are used for sizing, calculating dimensions of the display, etc.



----------
stickWidth         DEFAULT: don't show sticks.
nn_stickMarkers    DEFAULT: body segments for standard 15-marker human motion data.

.stickWidth is stick width (deg). 0 = don't show sticks.

If .stickWidth > 0, .nn_stickMarkers is an nx2 matrix with each row containing a set of two marker numbers to show a stick between.



----------
color    DEFAULT: white.

A 1x3 RGB vector with numbers between 0-1.



----------
repeat    DEFAULT: element play indefinitely by repeating until a cue you set in property .end.

true/false: play indefinitely by repeating until a cue you set in property .end occurs. If false, the object ends on its own at end of motion data. Only for md data (mm data always repeats).



----------
phase    DEFAULT: 0.

mm data: Start time in motion cycle (cycles). Or a string "r" = randomize.

md data: Start time in motion data (sec).



----------
invert
invertLocal
invertGlobal    DEFAULTS: don't invert.

.invert = true/false: invert (flip) vertically.

Only for mm data:

.invertLocal inverts only marker motion.

.invertGlobal inverts only mean marker positions across time.



----------
scramble
scrambleHorz
scrambleVert        DEFAULTS: don't scramble marker positions.
scrambleAreaSize    DEFAULT: fit scrambling cylinder to veridical display.

.scramble = true/false: randomize mean position across time for each marker. Markers are scrambled within a cylinder. Currently if you scramble then .elevation above must = 0.

You can also set .scramble to a number between 0-1 for partial scrambling. This interpolates between veridical and fully scrambled mean positions. Interpolation is done in spherical coordinates centered at walker center to approximately preserve the size of the stimulus across levels, i.e. markers go from veridical to fully scrambled along arcs instead of lines. This avoids intermediate scrambling levels tending to give a scrunched walker since lines would often pass from one side of the walker to the other.

.scrambleHorz and .scrambleVert are like .scramble but scramble only horizontally and/or vertically. They are true/false only (no partial scrambling).

If any scrambling is on, .scrambleAreaSize is a vector [width height] setting dimensions of the cylinder to scramble within (deg). String "f" = scramble within a cylinder fit to the veridical display (using mean marker positions across time).



----------
numScrambleDots    DEFAULT: number of mask dots = number of markers.

You can use the motion data as the basis for a mask made of scrambled dots by enabling scrambling above and setting this to number of mask dots. Markers in the data are then replicated into the specified number of dots as evenly as possible, and randomly for the remainder. [] = number of markers in data (i.e. just a scrambled walker, not a mask).

Note that since masks are randomized and have a transparent background you can layer multiple masks on top of each other if you need one aggregate mask that has a mix of properties (e.g. some dots at one azimuth and some at another).



----------
scramblePeriods        DEFAULT: don't scramble marker periods.
scramblePeriodDelta    DEFAULT: 2.

Only for mm data:

.scramblePeriods = true/false: randomize period (speed) for each marker.

If .scramblePeriods = true, period will be randomized by dividing by a number between 1/.scramblePeriodDelta and .scramblePeriodDelta drawn from a log-uniform distribution.



----------
scramblePhases    DEFAULT: don't scramble marker phases.

true/false: randomize phase (time series offset) for each marker. For md data with .repeat = false above, shifted markers will repeat across end of motion data as needed for each marker to run for the same duration.

You can also set to a number between 0-1 for partial scrambling. This interpolates between veridical and fully scrambled phases, where veridical is defined by .phase above.



----------
INPUT PROPERTIES ALL OBJECTS HAVE

*** See PsychBench Reference Manual sec 1 for full documentation. ***


- label     DEFAULT: none.
Struct with any fields containing any values you want as custom information to see for the object in experiment results. Field names go to headings in results table. [] = none.

- report    DEFAULT: none.
Array of strings that are names of properties to see for the object in experiment results. [] = none.



----------
INPUT PROPERTIES ALL ELEMENTS HAVE

*** See PsychBench Reference Manual sec 2 for full documentation. ***


- start             DEFAULT: no start cues.
Start time/cue(s) in the trial for the element. Further struct or struct array with one or more fields: .t, timeFromSync, startOf, endOf, response, responseBy, trigger, triggerBy, and, timeFrom. [] = no start cues -> element doesn't run.

- end               DEFAULT: no end cues.
End time/cue(s) in the trial for the element. Further struct or struct array with one or more fields: .t, timeFromSync, duration, startOf, endOf, response, responseBy, trigger, triggerBy, and, timeFrom. [] = no end cues -> element runs indefinitely unless it can end on its own.

- startBuffer
- endBuffer         DEFAULTS: none.
Time buffer to start/end (sec) if bufferable start/end latency occurs. Only for experiments where precise timing is important.

- syncExperimentAtTrigger
Not used by this class.

- staircase         DEFAULT: don't staircase element.
Staircase one or more input properties of the element. Further struct or struct array with one or more fields: .target, setExpr, min, max, setStaircaseExpr. [] = don't staircase element.



----------
INPUT PROPERTIES ALL VISUAL ELEMENTS HAVE

*** See PsychBench Reference Manual sec 2.1 for full documentation. ***


- position          DEFAULT: screen center.
Vector [x y] setting position on screen (deg). - = left/up, + = right/down, [0 0] = screen center.

- layer             DEFAULT: 0.
Number setting layering on screen. + = backward.

- nn_eyes           DEFAULT: both eyes.
1 = show on left eye, 2 = right eye, [1 2] = both eyes. Ignored if stereo display is of (screen object property .stereo).

- opacity           DEFAULT: no additional transparency.
0-1: 0 = fully transparent, 1 = nominal. (Psychtoolbox framework only)

- rotate
- flipHorz
- flipVert
- blur
- filterType
- filterKernel
- filterResolution
- backColor
Currently not implemented for this class.





RECORD PROPERTIES
PsychBench uses record properties to record information during experiments.
You can't set record properties but you can see them in experiment results using input property .report.
==========



----------
RECORD PROPERTIES ALL OBJECTS HAVE

*** See PsychBench Reference Manual sec 1 for full documentation. ***


- who
String: variable name and possibly index you used for the object in the experiment script, e.g. "pictures(2)".



----------
RECORD PROPERTIES ALL ELEMENTS HAVE

*** See PsychBench Reference Manual sec 2 for full documentation. ***


- startTime
– endTime
Start/End time relative to trial 1 start (sec).

- duration
End time - start time (sec).

- n_startFrame
- n_endFrame
Frame number in the trial for first/last frames the element ran in. Start time = first frame start time. End time = last frame end time.

- startLatencyBufferable
- endLatencyBufferable
Start/End delay that might be reducible by setting .startBuffer/.endBuffer (sec). Only for experiments where precise timing is important.

- syncTime
- trigger
- triggerTime
- d_triggerTime
- n_triggerFrame
- numTriggers
Not used by this class.